import git
import os
from pathlib import Path
import yaml
import subprocess
import re
import sys
from pprint import pprint
import pandas as pd

output_file = 'report.xlsx'

def clone_git_repo(repo):
    
    url = f'https://github.com/kamleshbp/{repo}.git'

    change_dir_to_root()
    destination_path = Path('clones', repo)

    if Path.exists(destination_path):
        print(f'The repo {repo} is already present at {destination_path}.')
        return
    try:
        git.Repo.clone_from(url, destination_path)
        print(f'Repository {repo} is cloned successfully at {destination_path}')
    except Exception as e:
        print(f'Something went wrong while cloning {repo}.')
        print(e)


def get_keyword_list():
    
    change_dir_to_root()
    with open('keywords.yml', 'r') as file:
        keywords = yaml.safe_load(file)
        keywords_list = keywords['keywords']
    
    return keywords_list


def get_repos_list():
    
    change_dir_to_root()
    with open('repos.yml', 'r') as file:
        repos = yaml.safe_load(file)
        repos_list = repos['repos']
    
    return repos_list


def run_command(command):
    
    if isinstance(command, str):
        command = command.split(' ')
    
    command_str = ' '.join(command)
    try:
        output = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        return output.stdout.decode('utf-8')
    except Exception as e:
        print(f'There was a error while running "{command_str}"')
        raise e
    

def get_root_dir():
    
    return Path(os.path.dirname(os.path.abspath(__file__))).parent.resolve()


def change_dir_to_root():
    
    root_dir = get_root_dir()
    os.chdir(root_dir)


def change_dir_to_repo(repo):
    
    root_dir = get_root_dir()
    repo_path = Path(root_dir, 'clones', repo)
    os.chdir(repo_path)


def get_commits_with_parents(repo):
    
    change_dir_to_repo(repo)
    result = run_command('git rev-list --parents --all')
    return [commit_and_parent.split(' ')[:2] for commit_and_parent in result.split('\n') if len(commit_and_parent.split(' ')) > 1]


def get_diff(commit, parent, repo):
    
    change_dir_to_repo(repo)
    try:
        diff = run_command(f'git diff {parent} {commit}')
        file_diffs = diff.split('diff --git')[1:]
        filename_regex = re.compile('a/([^ ]*)')
        result = []
        for file_diff in file_diffs:
            file_diff = '\n'.join([line for ind, line in enumerate(file_diff.split('\n')) if ind ==0 or (line and line[0] in '+-')])
            match_obj = filename_regex.search(file_diff)
            filename = match_obj.group(1)
            result.append({'filename': filename, 'file_diff': file_diff})
    except UnicodeDecodeError as e:
        result = []
    return result 


def get_vulnerabilities(text):

    keywords = get_keyword_list()
    vulnerabilities = []

    for keyword in keywords:
        name, regex = keywords['name'], keywords['regex']
        findings = re.finditer(regex, text)
        match_list = list(set([match_obj.group() for match_obj in findings]))
        if 'false_positive_regex' in keyword:
            match_list = [match_val for match_val in match_list if not re.search(keyword['false_positive_regex'], match_val)]
        if not match_list:
            continue
        vulnerabilities.append({'name': name, 'matched_values': match_list})
    
    return vulnerabilities


def get_vulnerabilities_data(repo):

    clone_git_repo()
    commits = get_commits_with_parents(repo)
    vulnerability_data = []
    cnt = 0
    for commit, parent in commits:
        vulnerabilities_by_file = []
        diff_list = get_diff(commit, parent, repo)
        for diff in diff_list:
            filename, file_diff = diff['filename'], diff['file_diff']
            vulnerabilities = get_vulnerabilities(file_diff)
            if vulnerabilities:
                vulnerabilities_by_file.append({'filename': filename, 'vulnerabilities': vulnerabilities})
        if vulnerabilities_by_file:
            vulnerability_data.append({'commit': commit, 'vulnerabilities': vulnerabilities_by_file})
    return vulnerability_data


def main():

    if len(sys.argv) > 1:
        repos = sys.argv[1:]
    else:
        repos = get_repos_list()

    data = {'repo': [], 'commit': [], 'url': [], 'filename': [], 'category': [], 'matched_val': []}
    for repo in repos:
        try:
            vulnerability_data = get_vulnerabilities_data(repo)
            for commit_details in vulnerability_data:
                commit = commit_details['commit']
                for vulnerability in commit_details['vulnerabilities']:
                    filename = vulnerability['filename']
                    url = f'https://github.com/kamleshbp/{repo}/blob/{commit}/{filename}'
                    for vul in vulnerability['vulnerabilities']:
                        category = vul['name']
                        matched_val = '\n'.join(vul['matched_values'])
                        data['repo'].append(repo)
                        data['commit'].append(commit)
                        data['url'].append(url)
                        data['filename'].append(filename)
                        data['category'].append(category)
                        data['matched_val'].append(matched_val)
        except Exception as e:
            print(f'Something went wrong for {repo}')
            print(e)
    df = pd.DataFrame(data)
    while True:
        try:
            df.to_excel(output_file, index=False)
            break
        except Exception as e:
            print(e)
            ans = input(f'Please close the {output_file}. Press any key after that: ')
    print(f'The data hase been exported to {output_file} successfully.')


if __name__ == "__main__":
    main()
